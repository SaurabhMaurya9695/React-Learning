				//Styling Component
1 - Inline Styles in React Components should be specifed as shown below:
    <h1 style={{color:'green'}}>Welcome to React</h1>

2 - <h1 style={{color:'green',fontFamily:'Verdana'}}>Welcome</h1>
<h1 style={{color:'green','background-color':'yellow'}}>Welcome</h1>

3 - to use Bootstrap we need to install Bootstrap library
	npm install bootstrap 

4 - import "bootstrap/dist/css/bootstrap.min.css"; then use all the bootstrap class

				//Styling with Bootstrap 
5 - install 	 npm i react-bootstrap 
		 import Button from "react-bootstrap/Button"  -> the use bootstrap class's ->  <Button variant="success">Submit</Button>
			
				//Styling with Material UI

6 - install first npm install @mui/material @emotion/react @emotion/styled and take reference from the ReactMaterialUI

7 - to use JSONDB first use 
			npm install -g json-server
			then create db.json and put some data inside this in json format
			then use this for react ->  npx json-server --watch db.json

8 - 				//Styling Components
8.1. JSX elements can be applied with inline styling by specifying an object to the style attribute
8.2. CSS classes can be added by importing the CSS file and using className attribute
8.3. index.css file acts as a global CSS file
8.4. React components can be styled using bootstrap, react-bootstrap and Material UI libraries. 
To use these libraries you need to install them

9 - 				//How to create JSX elements?
JSX is a special syntax introduced in ReactJS to write elements of components. 
It is syntactically identical to HTML and hence it can be easily read and written. 
Code written using JSX helps in visualizing the DOM structure easily.

10 -       JSX                               ->                        JsCode
      <h1> Hello World</h1>                            React.createElement("h1" , {} , "Hello World!! ") ;


11 -                              //React Fragments
By adhering to JSX syntax the <div> tag can be used for grouping the elements and this introduces an extra and unnecessary 
node into the DOM. As a solution to this, React Fragments are introduced which is a common pattern in React for a 
component to return multiple elements.
React Fragments allows to group a list of React elements without adding any extra node to the DOM.

12 - <h1> {"Expression to be evaluated "} </h1> ====> we can write Js Expression like this

13 -				//Condition Base Rendering 

 	      //using Ternery Opertor
function App() {
    let isLoggedIn = true;
    return (
    		<div>
    			{isLoggedIn && <h2>Welcome Admin</h2>}
    			{!isLoggedIn && <h2>Please Login</h2>}
    		</div>
    	)
}

14 - rendering as a list 

function App() {
  var employees = [
    { empId: 1234, name: "John", designation: "SE" },
    { empId: 4567, name: "Tom", designation: "SSE" },
    { empId: 8910, name: "Kevin", designation: "TA" },
  ];
  return (
    <>
      <table>
        <thead>
          <tr>
            <th>EmpID</th>
            <th>Name</th>
            <th>Designation</th>
          </tr>
        </thead>
        <tbody>
          {employees.map((employee) => {
            return (
              <tr>
                <td>{employee.empId}</td>
                <td>{employee.name}</td>
                <td>{employee.designation}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </>
  );
}
export default App;

//above code gives you error in console so use 
<tbody>
    {employees.map(employee => {
        return (<tr key={employee.empId}>
            <td>{employee.empId}</td>
            <td>{employee.name}</td>
            <td>{employee.designation}</td>
         </tr>)
     })
     }
</tbody>
